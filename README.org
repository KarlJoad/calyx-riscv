* Experimenting with writing a simple processor in Calyx

This is a bad implementation of a subset of the RISCV32-I instruction set.

** Reasons this is bad (and thus areas to improve)

- This implementation is not pipelined, meaning that each instruction takes ~18 cycles to execute
- I haven't used =static= anywhere. I think that most things can probably be made =static=
- I haven't made any particular effort to simplify decoding logic
- probably more things

* Some useful commands

Encode =simple.s= into Calyx data format.

#+begin_src async-shell :name encode :results none :dir ~/Research/calyx-processor/riscv-to-calyx
cargo run -- encode data/simple.s \
      --data ram:16:32:1 \
      --data reg_file:32:32 \
      --data dbg:1:32 \
      -o ../data/simple.json
#+end_src

Decode a calyx data file and read assembly instructions.

#+begin_src async-shell :name decode :results none :dir ~/Research/calyx-processor/riscv-to-calyx
cargo run -- decode ../data/simple.json
#+end_src

Simulate the design with icarus verilog (was having some issues with Verilator)

#+begin_src async-shell :name calyx-processor :results none
cargo run --manifest-path=riscv-to-calyx/Cargo.toml -- \
      encode riscv-to-calyx/data/simple.s \
      --data ram:16:32:1 \
      --data reg_file:32:32 \
      --data dbg:1:32 \
      -o data/simple.json

rm -rf .fud2
fud2 src/main.futil \
    --set sim.data=data/simple.json \
    --to dat --through icarus \
    --set sim.cycle_limit=100000 --keep

# | cargo run --manifest-path=riscv-to-calyx/Cargo.toml -- decode
#+end_src

Debug the design with a lovely vcd file

#+begin_src async-shell :name gen-vcd :results none
fud2 src/main.futil \
    --set sim.data=data/simple.json \
    --to vcd --through icarus --through trace \
    --set calyx.flags " -p no-opt" \
    --set verilog.cycle_limit=1000 \
    -o dbg.vcd
#+end_src

What I want this fud2 invocation to be:

#+begin_src async-shell :name calyx-riscv :results none
# fud2 list
# fud2 riscv-to-calyx/data/simple.s \
#      -s sim.cycle_limit=10000 \
#      --to riscv-decode
     # -m emit \

fud2 src/main.futil \
     -s riscv.asm=riscv-to-calyx/data/simple.s \
     -s sim.cycle_limit=10000 \
     --from riscv-asm2 \
     --to riscv-decode -v -m emit
#+end_src

Ok, got that to work. However, I think it was much more complicated than necessary.
I had to manually call a bunch of rules, basically reimplementing several stages by hand.
